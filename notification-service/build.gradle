plugins {
    id 'jacoco'
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id "org.openapi.generator" version "7.14.0"
}

group = 'ru.yofujitsu'
version = '0.0.1-SNAPSHOT'
description = 'notification-service'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jacoco {
    toolVersion = "0.8.10"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation "org.mapstruct:mapstruct:1.6.3"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.6.3"


    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$rootDir/src/main/resources/notification-service-openapi.yaml"
    outputDir = layout.buildDirectory.dir("generated").get().asFile.toString()
    apiPackage = "ru.yofujitsu.notification_service.api"
    modelPackage = "ru.yofujitsu.notification_service.model"
    invokerPackage = "ru.yofujitsu.notification_service.invoker"
    generateApiTests = false
    generateModelTests = false
    configOptions.set([
            interfaceOnly: "true",
            useJakartaEe: "true",
            useLombok: "true"
    ])
}

sourceSets {
    main {
        java {
            srcDirs += layout.buildDirectory.dir("generated/src/main/java")
        }
    }
}


tasks.named('jacocoTestReport') {
    dependsOn tasks.named('test')

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: [
                'ru/yofujitsu/notification_service/api/model/**',
                'ru/yofujitsu/notification_service/NotificationService.class'
        ])
    }))
}


tasks.named('test') {
    useJUnitPlatform()
}
